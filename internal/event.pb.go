// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: event.proto

package internal

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleProtobuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_ string   `protobuf:"bytes,1,opt,name=String,proto3" json:"String,omitempty"`
	Int64   int64    `protobuf:"varint,2,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Float64 float64  `protobuf:"fixed64,3,opt,name=Float64,proto3" json:"Float64,omitempty"`
	Slice   []string `protobuf:"bytes,4,rep,name=Slice,proto3" json:"Slice,omitempty"`
	Bytes   []byte   `protobuf:"bytes,5,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
}

func (x *SimpleProtobuf) Reset() {
	*x = SimpleProtobuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleProtobuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleProtobuf) ProtoMessage() {}

func (x *SimpleProtobuf) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleProtobuf.ProtoReflect.Descriptor instead.
func (*SimpleProtobuf) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleProtobuf) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *SimpleProtobuf) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *SimpleProtobuf) GetFloat64() float64 {
	if x != nil {
		return x.Float64
	}
	return 0
}

func (x *SimpleProtobuf) GetSlice() []string {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *SimpleProtobuf) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type Any struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Any:
	//
	//	*Any_String_
	//	*Any_Int32
	//	*Any_Int64
	//	*Any_Float
	//	*Any_Double
	Any isAny_Any `protobuf_oneof:"any"`
}

func (x *Any) Reset() {
	*x = Any{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Any) ProtoMessage() {}

func (x *Any) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Any.ProtoReflect.Descriptor instead.
func (*Any) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (m *Any) GetAny() isAny_Any {
	if m != nil {
		return m.Any
	}
	return nil
}

func (x *Any) GetString_() string {
	if x, ok := x.GetAny().(*Any_String_); ok {
		return x.String_
	}
	return ""
}

func (x *Any) GetInt32() int32 {
	if x, ok := x.GetAny().(*Any_Int32); ok {
		return x.Int32
	}
	return 0
}

func (x *Any) GetInt64() int64 {
	if x, ok := x.GetAny().(*Any_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *Any) GetFloat() float32 {
	if x, ok := x.GetAny().(*Any_Float); ok {
		return x.Float
	}
	return 0
}

func (x *Any) GetDouble() float64 {
	if x, ok := x.GetAny().(*Any_Double); ok {
		return x.Double
	}
	return 0
}

type isAny_Any interface {
	isAny_Any()
}

type Any_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=String,proto3,oneof"`
}

type Any_Int32 struct {
	Int32 int32 `protobuf:"varint,2,opt,name=Int32,proto3,oneof"`
}

type Any_Int64 struct {
	Int64 int64 `protobuf:"varint,3,opt,name=Int64,proto3,oneof"`
}

type Any_Float struct {
	Float float32 `protobuf:"fixed32,4,opt,name=Float,proto3,oneof"`
}

type Any_Double struct {
	Double float64 `protobuf:"fixed64,5,opt,name=Double,proto3,oneof"`
}

func (*Any_String_) isAny_Any() {}

func (*Any_Int32) isAny_Any() {}

func (*Any_Int64) isAny_Any() {}

func (*Any_Float) isAny_Any() {}

func (*Any_Double) isAny_Any() {}

type ComplexProtobuf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleString    string                   `protobuf:"bytes,1,opt,name=SimpleString,proto3" json:"SimpleString,omitempty"`
	HardString      string                   `protobuf:"bytes,2,opt,name=HardString,proto3" json:"HardString,omitempty"`
	SimpleStringPtr *string                  `protobuf:"bytes,3,opt,name=SimpleStringPtr,proto3,oneof" json:"SimpleStringPtr,omitempty"`
	HardStringPtr   *string                  `protobuf:"bytes,4,opt,name=HardStringPtr,proto3,oneof" json:"HardStringPtr,omitempty"`
	Int32           int32                    `protobuf:"varint,5,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64           int64                    `protobuf:"varint,6,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Int32Ptr        *int32                   `protobuf:"varint,7,opt,name=Int32Ptr,proto3,oneof" json:"Int32Ptr,omitempty"`
	Int64Ptr        *int64                   `protobuf:"varint,8,opt,name=Int64Ptr,proto3,oneof" json:"Int64Ptr,omitempty"`
	Float32         float32                  `protobuf:"fixed32,9,opt,name=Float32,proto3" json:"Float32,omitempty"`
	Float64         float64                  `protobuf:"fixed64,10,opt,name=Float64,proto3" json:"Float64,omitempty"`
	Float32Ptr      *float32                 `protobuf:"fixed32,11,opt,name=Float32Ptr,proto3,oneof" json:"Float32Ptr,omitempty"`
	Float64Ptr      *float64                 `protobuf:"fixed64,12,opt,name=Float64Ptr,proto3,oneof" json:"Float64Ptr,omitempty"`
	Map1            map[string]*Any          `protobuf:"bytes,13,rep,name=Map1,proto3" json:"Map1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2            map[string]*Any          `protobuf:"bytes,14,rep,name=Map2,proto3" json:"Map2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Slice1          []*Any                   `protobuf:"bytes,15,rep,name=slice1,proto3" json:"slice1,omitempty"`
	Slice2          []*Any                   `protobuf:"bytes,16,rep,name=slice2,proto3" json:"slice2,omitempty"`
	Bytes           []byte                   `protobuf:"bytes,17,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	BytesPtr        []byte                   `protobuf:"bytes,18,opt,name=BytesPtr,proto3,oneof" json:"BytesPtr,omitempty"`
	Struct          *ComplexProtobufEmbedded `protobuf:"bytes,19,opt,name=Struct,proto3" json:"Struct,omitempty"`
}

func (x *ComplexProtobuf) Reset() {
	*x = ComplexProtobuf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexProtobuf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexProtobuf) ProtoMessage() {}

func (x *ComplexProtobuf) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexProtobuf.ProtoReflect.Descriptor instead.
func (*ComplexProtobuf) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *ComplexProtobuf) GetSimpleString() string {
	if x != nil {
		return x.SimpleString
	}
	return ""
}

func (x *ComplexProtobuf) GetHardString() string {
	if x != nil {
		return x.HardString
	}
	return ""
}

func (x *ComplexProtobuf) GetSimpleStringPtr() string {
	if x != nil && x.SimpleStringPtr != nil {
		return *x.SimpleStringPtr
	}
	return ""
}

func (x *ComplexProtobuf) GetHardStringPtr() string {
	if x != nil && x.HardStringPtr != nil {
		return *x.HardStringPtr
	}
	return ""
}

func (x *ComplexProtobuf) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ComplexProtobuf) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ComplexProtobuf) GetInt32Ptr() int32 {
	if x != nil && x.Int32Ptr != nil {
		return *x.Int32Ptr
	}
	return 0
}

func (x *ComplexProtobuf) GetInt64Ptr() int64 {
	if x != nil && x.Int64Ptr != nil {
		return *x.Int64Ptr
	}
	return 0
}

func (x *ComplexProtobuf) GetFloat32() float32 {
	if x != nil {
		return x.Float32
	}
	return 0
}

func (x *ComplexProtobuf) GetFloat64() float64 {
	if x != nil {
		return x.Float64
	}
	return 0
}

func (x *ComplexProtobuf) GetFloat32Ptr() float32 {
	if x != nil && x.Float32Ptr != nil {
		return *x.Float32Ptr
	}
	return 0
}

func (x *ComplexProtobuf) GetFloat64Ptr() float64 {
	if x != nil && x.Float64Ptr != nil {
		return *x.Float64Ptr
	}
	return 0
}

func (x *ComplexProtobuf) GetMap1() map[string]*Any {
	if x != nil {
		return x.Map1
	}
	return nil
}

func (x *ComplexProtobuf) GetMap2() map[string]*Any {
	if x != nil {
		return x.Map2
	}
	return nil
}

func (x *ComplexProtobuf) GetSlice1() []*Any {
	if x != nil {
		return x.Slice1
	}
	return nil
}

func (x *ComplexProtobuf) GetSlice2() []*Any {
	if x != nil {
		return x.Slice2
	}
	return nil
}

func (x *ComplexProtobuf) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ComplexProtobuf) GetBytesPtr() []byte {
	if x != nil {
		return x.BytesPtr
	}
	return nil
}

func (x *ComplexProtobuf) GetStruct() *ComplexProtobufEmbedded {
	if x != nil {
		return x.Struct
	}
	return nil
}

type ComplexProtobufEmbedded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleString string          `protobuf:"bytes,1,opt,name=SimpleString,proto3" json:"SimpleString,omitempty"`
	HardString   string          `protobuf:"bytes,2,opt,name=HardString,proto3" json:"HardString,omitempty"`
	Int32        int32           `protobuf:"varint,3,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64        int64           `protobuf:"varint,4,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Float32      float32         `protobuf:"fixed32,5,opt,name=Float32,proto3" json:"Float32,omitempty"`
	Float64      float64         `protobuf:"fixed64,6,opt,name=Float64,proto3" json:"Float64,omitempty"`
	Map1         map[string]*Any `protobuf:"bytes,7,rep,name=Map1,proto3" json:"Map1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Map2         map[string]*Any `protobuf:"bytes,8,rep,name=Map2,proto3" json:"Map2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Slice1       []*Any          `protobuf:"bytes,9,rep,name=slice1,proto3" json:"slice1,omitempty"`
	Slice2       []*Any          `protobuf:"bytes,10,rep,name=slice2,proto3" json:"slice2,omitempty"`
	Bytes        []byte          `protobuf:"bytes,11,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	BytesPtr     []byte          `protobuf:"bytes,12,opt,name=BytesPtr,proto3,oneof" json:"BytesPtr,omitempty"`
}

func (x *ComplexProtobufEmbedded) Reset() {
	*x = ComplexProtobufEmbedded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexProtobufEmbedded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexProtobufEmbedded) ProtoMessage() {}

func (x *ComplexProtobufEmbedded) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexProtobufEmbedded.ProtoReflect.Descriptor instead.
func (*ComplexProtobufEmbedded) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *ComplexProtobufEmbedded) GetSimpleString() string {
	if x != nil {
		return x.SimpleString
	}
	return ""
}

func (x *ComplexProtobufEmbedded) GetHardString() string {
	if x != nil {
		return x.HardString
	}
	return ""
}

func (x *ComplexProtobufEmbedded) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *ComplexProtobufEmbedded) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *ComplexProtobufEmbedded) GetFloat32() float32 {
	if x != nil {
		return x.Float32
	}
	return 0
}

func (x *ComplexProtobufEmbedded) GetFloat64() float64 {
	if x != nil {
		return x.Float64
	}
	return 0
}

func (x *ComplexProtobufEmbedded) GetMap1() map[string]*Any {
	if x != nil {
		return x.Map1
	}
	return nil
}

func (x *ComplexProtobufEmbedded) GetMap2() map[string]*Any {
	if x != nil {
		return x.Map2
	}
	return nil
}

func (x *ComplexProtobufEmbedded) GetSlice1() []*Any {
	if x != nil {
		return x.Slice1
	}
	return nil
}

func (x *ComplexProtobufEmbedded) GetSlice2() []*Any {
	if x != nil {
		return x.Slice2
	}
	return nil
}

func (x *ComplexProtobufEmbedded) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *ComplexProtobufEmbedded) GetBytesPtr() []byte {
	if x != nil {
		return x.BytesPtr
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01,
	0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16,
	0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x22,
	0x89, 0x07, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0d, 0x48, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x74, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x50, 0x74,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0a,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x04, 0x4d, 0x61, 0x70, 0x31, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61,
	0x70, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d, 0x61, 0x70, 0x31, 0x12, 0x2e, 0x0a,
	0x04, 0x4d, 0x61, 0x70, 0x32, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61,
	0x70, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d, 0x61, 0x70, 0x32, 0x12, 0x1c, 0x0a,
	0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x06, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x32, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x74, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x06, 0x52, 0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x52, 0x06, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x1a, 0x3d, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x04, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3d, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x04, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x74, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x48, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x74, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x50, 0x74, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x50, 0x74, 0x72, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x50, 0x74, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x74, 0x72, 0x22, 0xab, 0x04, 0x0a, 0x17,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x48,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x48, 0x61, 0x72, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x04, 0x4d,
	0x61, 0x70, 0x31, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d,
	0x61, 0x70, 0x31, 0x12, 0x36, 0x0a, 0x04, 0x4d, 0x61, 0x70, 0x32, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x4d, 0x61, 0x70, 0x32, 0x12, 0x1c, 0x0a, 0x06, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x31, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x31, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x32, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x74, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x3d,
	0x0a, 0x09, 0x4d, 0x61, 0x70, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x09, 0x4d, 0x61, 0x70, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x74, 0x72, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6f, 0x72, 0x65, 0x71, 0x2f, 0x67, 0x6f,
	0x2d, 0x62, 0x69, 0x70, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_event_proto_goTypes = []interface{}{
	(*SimpleProtobuf)(nil),          // 0: SimpleProtobuf
	(*Any)(nil),                     // 1: Any
	(*ComplexProtobuf)(nil),         // 2: ComplexProtobuf
	(*ComplexProtobufEmbedded)(nil), // 3: ComplexProtobufEmbedded
	nil,                             // 4: ComplexProtobuf.Map1Entry
	nil,                             // 5: ComplexProtobuf.Map2Entry
	nil,                             // 6: ComplexProtobufEmbedded.Map1Entry
	nil,                             // 7: ComplexProtobufEmbedded.Map2Entry
}
var file_event_proto_depIdxs = []int32{
	4,  // 0: ComplexProtobuf.Map1:type_name -> ComplexProtobuf.Map1Entry
	5,  // 1: ComplexProtobuf.Map2:type_name -> ComplexProtobuf.Map2Entry
	1,  // 2: ComplexProtobuf.slice1:type_name -> Any
	1,  // 3: ComplexProtobuf.slice2:type_name -> Any
	3,  // 4: ComplexProtobuf.Struct:type_name -> ComplexProtobufEmbedded
	6,  // 5: ComplexProtobufEmbedded.Map1:type_name -> ComplexProtobufEmbedded.Map1Entry
	7,  // 6: ComplexProtobufEmbedded.Map2:type_name -> ComplexProtobufEmbedded.Map2Entry
	1,  // 7: ComplexProtobufEmbedded.slice1:type_name -> Any
	1,  // 8: ComplexProtobufEmbedded.slice2:type_name -> Any
	1,  // 9: ComplexProtobuf.Map1Entry.value:type_name -> Any
	1,  // 10: ComplexProtobuf.Map2Entry.value:type_name -> Any
	1,  // 11: ComplexProtobufEmbedded.Map1Entry.value:type_name -> Any
	1,  // 12: ComplexProtobufEmbedded.Map2Entry.value:type_name -> Any
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleProtobuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Any); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexProtobuf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexProtobufEmbedded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Any_String_)(nil),
		(*Any_Int32)(nil),
		(*Any_Int64)(nil),
		(*Any_Float)(nil),
		(*Any_Double)(nil),
	}
	file_event_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_event_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
